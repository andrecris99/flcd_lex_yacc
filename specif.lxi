  
%{  
#include <math.h> 
#include <math.h> 
#include <stdio.h>
int lines = 1;
%} 

%option noyywrap
%option caseless

DIGIT 		[0-9]
CHARACTER	(['][a-zA-Z]['])|(['][0-9]['])
NUMBER		[+-]?[1-9][0-9]*|0
CONST		{NUMBER}|{CHARACTER}
ID 		[a-zA-Z]([a-zA-Z]|[0-9]|_){0,8}

%% 

"INT_MAIN"	{printf( "Reserved word: %s\n", yytext ); }
"CHAR"		{printf( "Reserved word: %s\n", yytext ); }
"INT"		{printf( "Reserved word: %s\n", yytext ); }
"IF"		{printf( "Reserved word: %s\n", yytext ); }
"ELSE"		{printf( "Reserved word: %s\n", yytext ); }
"PRINT"		{printf( "Reserved word: %s\n", yytext ); }
"READ"		{printf( "Reserved word: %s\n", yytext ); }
"WHILE"		{printf( "Reserved word: %s\n", yytext ); }
"LIST"		{printf( "Reserved word: %s\n", yytext ); }
"RETURN"	{printf( "Reserved word: %s\n", yytext ); }

{ID} 		printf( "An identifier: %s\n", yytext ); 

{CONST}		{printf( "Constant: %s\n", yytext ); }

":"	{printf( "Separator: %s\n", yytext ); }
"+"	{printf( "Operator: %s\n", yytext ); }
"-"	{printf( "Operator: %s\n", yytext ); }
"*"	{printf( "Operator: %s\n", yytext ); }
"/"	{printf( "Operator: %s\n", yytext ); }
":="	{printf( "Separator: %s\n", yytext ); }
"<"	{printf( "Operator: %s\n", yytext ); }
">"	{printf( "Operator: %s\n", yytext ); }
"<="	{printf( "Operator: %s\n", yytext ); }
"=="	{printf( "Operator: %s\n", yytext ); }
">="	{printf( "Operator: %s\n", yytext ); }
"!="	{printf( "Operator: %s\n", yytext ); }
"&&"	{printf( "Operator: %s\n", yytext ); }
"||"	{printf( "Operator: %s\n", yytext ); }
","	{printf( "Separator: %s\n", yytext ); }
"["	{printf( "Separator: %s\n", yytext ); }
"]"	{printf( "Separator: %s\n", yytext ); }
"("	{printf( "Separator: %s\n", yytext ); }
")"	{printf( "Separator: %s\n", yytext ); }
"{"	{printf( "Separator: %s\n", yytext ); }
"}"	{printf( "Separator: %s\n", yytext ); }

[\n]	{++lines;}	/* remember error line */ 

"{"[^}\n]*"}" 		/* eat up one-line comments */ 

[ \t]+ 			/* eat up whitespace */ 

[a-zA-Z]([a-zA-Z]|[0-9]){9,}	{printf("Lexical error! Illegal size of the identifier at line %d.\n", lines); return -1;}

[0-9][a-zA-Z0-9]{0,7}		{printf("Lexical error! Illegal identifier at line %d\n", lines); return -1;}

.	{printf( "Lexical error! Unrecognized character: %s at line %d\n", yytext, lines ); return -1;}


%% 
main( argc, argv ) 
int argc; 
char **argv; 
{ 
    ++argv, --argc; /* skip over program name */ 
    if ( argc > 0 ) 
	yyin = fopen( argv[0], "r" ); 
    else 
	yyin = stdin; 
    yylex(); 
} 